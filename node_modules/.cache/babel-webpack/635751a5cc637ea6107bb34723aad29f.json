{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ngx-toastr\";\nconst helper = new JwtHelperService();\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, toastr) {\n      this.http = http;\n      this.router = router;\n      this.toastr = toastr;\n      this.loggedIn = new BehaviorSubject(false); // private role = new BehaviorSubject<Roles>(null);\n      //private role= new BehaviorSubject <void>;\n\n      this.cedula = new BehaviorSubject(null);\n      this.role = new BehaviorSubject(null);\n      this.checkToken();\n    }\n\n    get isLogged() {\n      return this.loggedIn.asObservable();\n    }\n\n    get isAdmin$() {\n      return this.role.asObservable();\n    }\n\n    get iscedula$() {\n      return this.cedula.asObservable();\n    }\n\n    login(authData) {\n      return this.http.post(`http://192.168.12.247:3000/auth/login`, authData) //mi api\n      .pipe(map(user => {\n        this.saveLocalStorage(user);\n        this.loggedIn.next(true);\n        this.role.next(user.role);\n        this.cedula.next(user.cedula);\n        return user;\n      }), catchError(err => this.handlerError(err)));\n    }\n\n    logout() {\n      localStorage.removeItem('user');\n      this.loggedIn.next(false);\n      this.role.next(null);\n      this.router.navigate(['/login']);\n    }\n\n    checkToken() {\n      const user = JSON.parse(localStorage.getItem('user')) || null;\n      /* console.log(user);*/\n\n      if (user) {\n        const isExpired = helper.isTokenExpired(user.token);\n\n        if (isExpired) {\n          this.logout();\n        } else {\n          //this.user.next(user);\n          this.loggedIn.next(true);\n          this.role.next(user.role);\n          this.cedula.next(user.cedula);\n        }\n      }\n    }\n\n    saveLocalStorage(user) {\n      const {\n        userId,\n        message\n      } = user,\n            rest = __rest(user, [\"userId\", \"message\"]);\n\n      localStorage.setItem('user', JSON.stringify(rest));\n    } //mensaje de no login error\n\n\n    handlerError(err) {\n      let errorMessage = 'USUARIO O CLAVE INCORRECTO';\n\n      if (err) {\n        errorMessage = `Error:  ${errorMessage}`;\n      }\n\n      window.alert(errorMessage);\n      return throwError(errorMessage);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.ToastrService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}